
%{ 	 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"
int currentLine = 1;
%} 

%option noyywrap

IDENTIFIER		[a-zA-Z][a-zA-Z0-9]*

NUMBER_CONST	0|[+|-]?[1-9][0-9]*([.][0-9]*)?|[+|-]?0[.][0-9]*

STRING_CONST	[\"][a-zA-Z0-9 ]+[\"]

CHAR_CONST		[\'][a-zA-Z0-9 ][\']

%%

"integer"		{printf("Reserved word: %s\n", yytext); return INTEGER;}

"string"	{printf("Reserved word: %s\n", yytext); return STRING;}

"char"		{printf("Reserved word: %s\n", yytext); return CHAR;}

"read"		{printf("Reserved word: %s\n", yytext); return READ;}

"print"		{printf("Reserved word: %s\n", yytext); return PRINT;}

"if"		{printf("Reserved word: %s\n", yytext); return IF;}

"else"		{printf("Reserved word: %s\n", yytext); return ELSE;}

"loop"		{printf("Reserved word: %s\n", yytext); return LOOP;}

"during"		{printf("Reserved word: %s\n", yytext); return DURING;}

"array"		{printf("Reserved word: %s\n", yytext); return ARRAY;}

"start"		{printf("Reserved word: %s\n", yytext); return START;}

"break"		{printf("Reserved word: %s\n", yytext); return BREAK;}



"+"		{printf("Operator %s\n", yytext); return plus;}

"-"		{printf("Operator %s\n", yytext); return minus;}

"*"		{printf("Operator %s\n", yytext); return mul;}

"/"		{printf("Operator %s\n", yytext); return division;}

"mod"		{printf("Operator %s\n", yytext); return mod;}

"<="		{printf("Operator %s\n", yytext); return lessOrEqual;}

">="		{printf("Operator %s\n", yytext); return moreOrEqual;}

"<"		{printf("Operator %s\n", yytext); return less;}

">"		{printf("Operator %s\n", yytext); return more;}

"=="		{printf("Operator %s\n", yytext); return equal;}

"!="		{printf("Operator %s\n", yytext); return different;}

"="		{printf("Operator %s\n", yytext); return eq;}

"&"		{printf("Operator %s\n", yytext); return and;}

"|"		{printf("Operator %s\n", yytext); return or;}


"{"		{printf("Separator %s\n", yytext); return leftCurlyBracket;}

"}"		{printf("Separator %s\n", yytext); return rightCurlyBracket;}

"("		{printf("Separator %s\n", yytext); return leftRoundBracket;}

")"		{printf("Separator %s\n", yytext); return rightRoundBracket;}

"["		{printf("Separator %s\n", yytext); return leftBracket;}

"]"		{printf("Separator %s\n", yytext); return rightBracket;}

":"		{printf("Separator %s\n", yytext); return colon;}

"."		{printf("Separator %s\n", yytext); return point;}

","		{printf("Separator %s\n", yytext); return comma;}

"'"		{printf("Separator %s\n", yytext); return apostrophe;}

"\""		{printf("Separator %s\n", yytext); return quote;}

{IDENTIFIER}		{printf("Identifier: %s\n", yytext); return IDENTIFIER;}
{NUMBER_CONST}		{printf("Number: %s\n", yytext); return NUMBER_CONST;}
{STRING_CONST}		{printf("String: %s\n", yytext); return STRING_CONST;}
{CHAR_CONST}		{printf("Character: %s\n", yytext); return CHAR_CONST;}

[ \t]+		{}
[\n]+	{currentLine++;}

[0-9][a-zA-Z0-9]* {printf("Error: Incorrect IDENTIFIER at the line %d\n", currentLine);}

[+|-]0	{printf("Error: Incorrect NUMERIC CONSTANT at the line %d\n", currentLine);}

[+|-]?[0][0-9]*([.][0-9]*)? {printf("Error: Incorrect NUMERIC CONSTANT at line %d\n", currentLine);}

[\'][a-zA-Z0-9 ]{1,}[\'] {printf("Error: Incorrect CHAR CONSTANT at line %d\n", currentLine);}

[\"][a-zA-Z0-9]+|[a-zA-Z0-9]+[\"] {printf("Error: Incorrect STRING CONSTANT at line %d\n", currentLine);}


%%